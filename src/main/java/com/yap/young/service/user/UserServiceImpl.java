package com.yap.young.service.user;

import com.yap.young.configuration.KeycloakConfig;
import com.yap.young.configuration.S3Uploader;
import com.yap.young.dto.*;
import com.yap.young.entity.Country;
import com.yap.young.entity.UserDevice;
import com.yap.young.entity.UserProfile;
import com.yap.young.exception.MissingParameterException;
import com.yap.young.exception.ResourceAlreadyExistsException;
import com.yap.young.exception.ResourceNotFoundException;
import com.yap.young.repository.CountryRepository;
import com.yap.young.repository.UserDeviceRepository;
import com.yap.young.repository.UserProfileRepository;
import com.yap.young.service.notification.EmailService;
import com.yap.young.service.uqudo.UqudoService;
import com.yap.young.util.AppConstants;
import com.yap.young.util.CommonUtils;
import com.yap.young.util.EntityToDtoMapper;
import com.yap.young.util.ResponseHandler;
import jakarta.ws.rs.InternalServerErrorException;
import org.keycloak.representations.AccessTokenResponse;
import org.keycloak.representations.idm.UserRepresentation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import java.time.LocalDateTime;
import java.util.*;

@Service
public class UserServiceImpl implements UserService {

    private final UserProfileRepository userProfileRepository;

    private final Random random = new Random();

    private final S3Uploader s3Uploader;

    private final KeycloakConfig keycloakConfig;

    private final UqudoService uqudoService;

    private final CountryRepository countryRepository;

    private final UserDeviceRepository userDeviceRepository;

    private final EmailService emailService;

    private static final Logger LOGGER = LoggerFactory.getLogger(UserServiceImpl.class);

    public UserServiceImpl(UserProfileRepository userProfileRepository, S3Uploader s3Uploader, KeycloakConfig keycloakConfig, UqudoService uqudoService, CountryRepository countryRepository, UserDeviceRepository userDeviceRepository, EmailService emailService) {
        this.userProfileRepository = userProfileRepository;
        this.s3Uploader = s3Uploader;
        this.keycloakConfig = keycloakConfig;
        this.uqudoService = uqudoService;
        this.countryRepository = countryRepository;
        this.userDeviceRepository = userDeviceRepository;
        this.emailService = emailService;
    }

    @Override
    public ResponseEntity<Object> getYapTag(String userId, Optional<String> tagName) {
        LOGGER.info("Get Yap tag by user: {}", userId);
        UserRepresentation user = keycloakConfig.getUserById(userId);
        try {
            String fullName = keycloakConfig.getAttributeFromUser(user, AppConstants.FULL_NAME);
            if (tagName.isPresent()) {
                return checkForValidYapTag(tagName.get(), fullName);
            }
            String email = user.getEmail();
            String dob = keycloakConfig.getAttributeFromUser(user, AppConstants.DOB);

            LOGGER.info("Yap tag generated by user: {}", userId);
            return ResponseEntity.ok(generateYAPTagSuggestions(fullName, email, dob));
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            throw new InternalServerErrorException();
        }
    }

    private ResponseEntity<Object> checkForValidYapTag(String tagName, String fullName) {
        if (tagName.isBlank())
            return ResponseHandler.generateResponse(AppConstants.ERROR_TAG_NAME_IS_BLANK, HttpStatus.BAD_REQUEST);
        if (!StringUtils.hasLength(tagName) || tagName.length() < 3 || tagName.length() > 20) {
            return ResponseHandler.generateResponse(AppConstants.ERROR_TAG_NAME_RANGE, HttpStatus.BAD_REQUEST);
        }
        return checkTagNameAlreadyExist(tagName, fullName);
    }

    public List<String> generateYAPTagSuggestions(String fullName, String email, String dob) {
        List<String> suggestions = new ArrayList<>();
        String firstName = CommonUtils.getFirstNameFromString(fullName);
        String lastName = CommonUtils.getLastNameWithUnderScoreFromString(fullName);
        String monthOfBirth = CommonUtils.getMonthFromDob(dob);

        String suggestion1 = firstName + monthOfBirth;
        if (checkIfTagNameExists(suggestion1)) {
            suggestion1 = firstName + (1000 + random.nextInt(9000));
        }
        suggestions.add(CommonUtils.transformSuggestion(suggestion1));

        String emailHandle = email.substring(0, email.indexOf('@'));
        suggestions.add(CommonUtils.transformSuggestion(emailHandle));

        String suggestion3 = firstName + "_" + lastName;
        if (checkIfTagNameExists(suggestion3)) {
            suggestion3 = firstName + "_" + lastName + (1000 + random.nextInt(9000));
        }
        suggestions.add(CommonUtils.transformSuggestion(suggestion3));

        return suggestions;
    }

    private ResponseEntity<Object> checkTagNameAlreadyExist(String tagName, String fullName) {
        boolean exists = checkIfTagNameExists(tagName);
        if (Boolean.TRUE.equals(exists))
            return ResponseHandler.generateResponse(AppConstants.ERROR_TAG_NAME_EXIST, HttpStatus.BAD_REQUEST, getYapTag(tagName, 3));
        else
            return ResponseHandler.generateResponse(AppConstants.TAG_NAME_VERIFIED, HttpStatus.OK, fullName);
    }

    public boolean checkIfTagNameExists(String tagName) {
        return userProfileRepository.existsByYapTag(tagName);
    }

    public List<String> getYapTag(String tagName, int i) {
        List<String> tagNames = new ArrayList<>();

        while (tagNames.size() < i) {
            String newTagName = tagName + CommonUtils.generateRandomNumber(2);
            if (newTagName.charAt(0) != '@')
                newTagName = AppConstants.AT_SYMBOL + newTagName;
            if (!userProfileRepository.existsByYapTag(newTagName)) {
                tagNames.add(newTagName);
            }
        }
        return tagNames;
    }

    @Override
    public ResponseEntity<Object> saveUserProfileDetails(MultipartFile file, String cardColor, String cardDisplayName, String yapTag, String userId) {
        LOGGER.info("Save user profile details by user ID: {}", userId);
        checkInputValidation(cardColor, cardDisplayName, yapTag, userId);
        UserProfile userProfile = new UserProfile();
        if (file != null && !file.isEmpty()) {
            s3Uploader.uploadFile(file);
            userProfile.setProfilePictureUrl(s3Uploader.getFileUrl(file.getOriginalFilename()));
            userProfile.setFileName(file.getOriginalFilename());
        }
        try {
            userProfile.setCardColor(cardColor);
            userProfile.setCardDisplayName(cardDisplayName);
            userProfile.setYapTag(yapTag);
            userProfile.setChildId(userId);

            userProfileRepository.save(userProfile);

            LOGGER.info("User profile details updated by user ID: {}", userId);
            return ResponseHandler.generateResponse(AppConstants.USER_PROFILE_UPDATED_SUCCESS, HttpStatus.CREATED);
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            throw new InternalServerErrorException();
        }
    }

    private void checkInputValidation(String cardColor, String cardDisplayName, String yapTag, String userId) {
        if (cardColor == null || cardColor.isEmpty()) {
            throw new MissingParameterException(AppConstants.CARD_COLOR);
        }
        if (cardDisplayName == null || cardDisplayName.isEmpty()) {
            throw new MissingParameterException(AppConstants.CARD_NAME);
        }
        if (yapTag == null || yapTag.isEmpty()) {
            throw new MissingParameterException(AppConstants.TAG_NAME);
        }
        if (getUserProfileByUserId(userId).isPresent()) {
            throw new ResourceAlreadyExistsException(AppConstants.ERROR_USER_ALREADY_EXISTS);
        }
        if (checkIfTagNameExists(yapTag)) {
            throw new IllegalArgumentException(AppConstants.ERROR_USER_ALREADY_EXISTS);
        }
    }

    private Optional<UserProfile> getUserProfileByUserId(String userId) {
        return userProfileRepository.findByChildId(userId);
    }

    @Override
    public ResponseEntity<Object> getDataByScanDocument(String parentId, String documentType, MultipartFile frontImage, MultipartFile backImage) {
        LOGGER.info("Get child details for the parent Id: {}", parentId);
        UqudoIdResponseDTO uqudoIdResponseDTO = uqudoService.scanDocument(documentType, frontImage, backImage);

        try {
            UqudoIdFrontResponseDTO uqudoIdFrontResponseDTO = uqudoIdResponseDTO.getFront();
            UqudoIdBackResponseDTO uqudoIdBackResponseDTO = uqudoIdResponseDTO.getBack();
            UserRepresentation user = keycloakConfig.getUserById(parentId);
            String parentName = keycloakConfig.getAttributeFromUser(user, AppConstants.FULL_NAME);

            if (uqudoIdBackResponseDTO.getSponsorName() == null || uqudoIdBackResponseDTO.getSponsorName().isBlank()) {
                return ResponseHandler.generateResponse(AppConstants.ERROR_NOT_VALID_EID, HttpStatus.BAD_REQUEST);
            }

            if (parentName != null && !uqudoIdBackResponseDTO.getSponsorName().equals(parentName)) {
                return ResponseHandler.generateResponse(AppConstants.ERROR_SPONSOR_NAME_MISMATCH, HttpStatus.BAD_REQUEST);
            }

            int age = CommonUtils.getAgeFromDob(uqudoIdFrontResponseDTO.getDateOfBirthFormatted());
            if (CommonUtils.isAgeInWarningRange(uqudoIdFrontResponseDTO.getDateOfBirthFormatted())) {
                return ResponseHandler.generateResponse(AppConstants.AGE_BETWEEN_WARNING_RANGE, HttpStatus.OK, "17.5 - 18");
            }
            if (age < 8) {
                return ResponseHandler.generateResponse(AppConstants.ERROR_AGE_LESS_THAN_EIGHT, HttpStatus.BAD_REQUEST, 8);
            }
            if (age > 17) {
                return ResponseHandler.generateResponse(AppConstants.ERROR_AGE_GREATER_THAN_SEVENTEEN, HttpStatus.BAD_REQUEST, 17);
            }
            LOGGER.info("Child details retrieved for the parent Id: {}", parentId);
            return ResponseHandler.generateResponse(AppConstants.USER_PROFILE_RETRIEVED_SUCCESS, HttpStatus.OK, getChildInfo(uqudoIdFrontResponseDTO));
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            throw new InternalServerErrorException();
        }
    }

    private Object getChildInfo(UqudoIdFrontResponseDTO uqudoIdFrontResponseDTO) {
        Map<String, Object> childResponseMap = new HashMap<>();
        Optional.ofNullable(uqudoIdFrontResponseDTO.getFullName()).ifPresent(fullName -> childResponseMap.put("fullName", uqudoIdFrontResponseDTO.getFullName()));
        Optional.of(uqudoIdFrontResponseDTO.getGender()).ifPresent(gender -> childResponseMap.put("gender", CommonUtils.getGender(uqudoIdFrontResponseDTO.getGender())));
        Optional.ofNullable(uqudoIdFrontResponseDTO.getDateOfBirthFormatted()).ifPresent(dob -> childResponseMap.put("dob", uqudoIdFrontResponseDTO.getDateOfBirthFormatted()));
        Optional.ofNullable(uqudoIdFrontResponseDTO.getNationality()).ifPresent(nationality -> childResponseMap.put("country", getCountryByName(uqudoIdFrontResponseDTO.getNationality())));
        return childResponseMap;
    }

    private Country getCountryByName(String name) {
        return countryRepository.findByName(name)
                .orElseThrow(() -> new ResourceNotFoundException(AppConstants.ERROR_COUNTRY_NOT_FOUND));
    }

    @Override
    public ResponseEntity<Object> bindDeviceToUser(String userId, DeviceBindRequestDTO deviceBindRequestDTO) {
        LOGGER.info("Binding the device for the user Id: {}", userId);
        UserRepresentation userRepresentation = keycloakConfig.getUserById(userId);
        checkIfDeviceAlreadyBound(userId, deviceBindRequestDTO.getDeviceId());
        try {
            List<UserDevice> userDeviceList = deactivateActiveDevices(userId);
            keycloakConfig.updateUserCustomAttribute(userRepresentation, AppConstants.DEVICE_ID, deviceBindRequestDTO.getDeviceId());
            updateUserDeviceRecord(userId, deviceBindRequestDTO, userDeviceList);

            // Email Notification to the user
            emailService.sendDeviceRegisterConfirmationToUser(userId, userRepresentation.getFirstName() + " " + userRepresentation.getLastName(), userRepresentation.getEmail(), deviceBindRequestDTO.getOsVersion());
            LOGGER.info("Device successfully registered for the user Id: {}", userId);
            return ResponseHandler.generateResponse(AppConstants.USER_DEVICE_CREATED_SUCCESS, HttpStatus.CREATED);
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            throw new InternalServerErrorException();
        }
    }

    private void updateUserDeviceRecord(String userId, DeviceBindRequestDTO deviceBindRequestDTO, List<UserDevice> userDeviceList) {
        UserDevice userDevice;
        Optional<UserDevice> userDeviceOptional = userDeviceRepository.findByUserIdAndDeviceId(userId, deviceBindRequestDTO.getDeviceId());
        if (userDeviceOptional.isPresent()) {
            userDevice = userDeviceOptional.get();
            userDevice.setIsActive(true);
            userDevice.setUpdatedAt(LocalDateTime.now());
            userDeviceList.add(userDevice);
        } else {
            userDevice = EntityToDtoMapper.mapDeviceBindRequestDTO(userId, deviceBindRequestDTO.getDeviceId(), deviceBindRequestDTO.getOsVersion(), deviceBindRequestDTO.getLocation());
            userDeviceList.add(userDevice);
        }
        userDeviceRepository.saveAll(userDeviceList);
    }

    private List<UserDevice> deactivateActiveDevices(String userId) {
        List<UserDevice> userDeviceList = userDeviceRepository.findByUserIdAndIsActive(userId, true);
        userDeviceList.forEach(userDevice -> {
            userDevice.setIsActive(false);
            userDevice.setUpdatedAt(LocalDateTime.now());
        });
        return userDeviceList;
    }

    private void checkIfDeviceAlreadyBound(String userId, String deviceId) {
        Optional<UserDevice> userDeviceOptional = getUserDevice(userId, deviceId);
        if (userDeviceOptional.isPresent())
            throw new ResourceAlreadyExistsException(AppConstants.ERROR_DEVICE_ID_ALREADY_BOUNDED);
    }

    private Optional<UserDevice> getUserDevice(String userId, String deviceId) {
        return userDeviceRepository.findByUserIdAndDeviceIdAndIsActive(userId, deviceId, true);
    }

    @Override
    public ResponseEntity<Object> checkDeviceBinding(String userId, String deviceId) {
        Optional<UserDevice> userDeviceOptional = getUserDevice(userId, deviceId);
        if (userDeviceOptional.isPresent())
            return ResponseHandler.generateResponse(AppConstants.USER_DEVICE_VERIFIED_SUCCESS, HttpStatus.OK);
        return ResponseHandler.generateResponse(AppConstants.ERROR_USER_DEVICE_NOT_BOUNDED, HttpStatus.CONFLICT);
    }

    @Override
    public ResponseEntity<Object> unboundDeviceFromUser(String userId, String deviceId) {
        LOGGER.info("Unbound the device for the user Id: {}", userId);
        UserRepresentation userRepresentation = keycloakConfig.getUserById(userId);
        Optional<UserDevice> userDeviceOptional = getUserDevice(userId, deviceId);
        if (userDeviceOptional.isEmpty())
            throw new ResourceNotFoundException(AppConstants.ERROR_DEVICE_NOT_BOUNDED);
        try {
            keycloakConfig.updateUserCustomAttribute(userRepresentation, AppConstants.DEVICE_ID, null);
            return updateUserDevice(userDeviceOptional.get());
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            throw new InternalServerErrorException();
        }
    }

    @Override
    public ResponseEntity<Object> getUserDetails(String userId) {
        LOGGER.info("Getting user details from Keycloak by user ID: {}", userId);
        UserRepresentation user = keycloakConfig.getUserById(userId);
        UserProfile userProfile = getUserProfileByUserId(userId)
                .orElseThrow(() -> new ResourceNotFoundException(AppConstants.USER_PROFILE_NOT_FOUND));
        try {
            String mobile = keycloakConfig.getAttributeFromUser(user, AppConstants.MOBILE);
            UserProfileResponseDTO userProfileResponseDTO = EntityToDtoMapper.mapUserProfileToUserProfileDTO(userProfile, user, mobile);
            LOGGER.info("User profile details fetched successfully: {}", userProfileResponseDTO);
            return ResponseHandler.generateResponse(AppConstants.USER_PROFILE_SUCCESS, HttpStatus.OK, userProfileResponseDTO);
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            throw new InternalServerErrorException();
        }
    }

    private ResponseEntity<Object> updateUserDevice(UserDevice userDevice) {
        userDevice.setIsActive(false);
        userDeviceRepository.save(userDevice);
        LOGGER.info("Successfully Unbounded the device from the user Id: {}", userDevice.getUserId());
        return ResponseHandler.generateResponse(AppConstants.USER_DEVICE_UNBOUNDED_SUCCESS, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<Object> updateUserImage(String userId, MultipartFile file) {
        LOGGER.info("Updating the user image for the user Id: {}", userId);
        UserRepresentation userRepresentation = keycloakConfig.getUserById(userId);
        UserProfile userProfile = getUserProfileByUserId(userRepresentation.getId())
                .orElseThrow(() -> new ResourceNotFoundException(AppConstants.USER_PROFILE_NOT_FOUND));
        try {
            if (file != null && !file.isEmpty()) {
                s3Uploader.deleteObject(userProfile.getFileName());

                s3Uploader.uploadFile(file);
                userProfile.setProfilePictureUrl(s3Uploader.getFileUrl(file.getOriginalFilename()));
                userProfile.setFileName(file.getOriginalFilename());
                userProfileRepository.save(userProfile);
            }
            LOGGER.info("Updated the user image for the user Id: {}", userId);
            return ResponseHandler.generateResponse(AppConstants.USER_IMAGE_UPDATED_SUCCESS, HttpStatus.OK);
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            throw new InternalServerErrorException();
        }
    }

    @Override
    public ResponseEntity<Object> checkPasswordAgainstUser(String userId, String password) {
        LOGGER.info("Checking the password for the user Id: {}", userId);
        UserRepresentation userRepresentation = keycloakConfig.getUserById(userId);
        AccessTokenResponse accessTokenResponse = keycloakConfig.getAccessToken(userRepresentation.getUsername(), String.valueOf(password)).tokenManager().getAccessToken();
        try {
            if (accessTokenResponse != null) {
                return ResponseHandler.generateResponse(AppConstants.PASSWORD_VERIFIED_SUCCESS, HttpStatus.OK);
            } else {
                return ResponseHandler.generateResponse(AppConstants.ERROR_PASSWORD_NOT_CORRECT, HttpStatus.BAD_REQUEST);
            }
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            throw new InternalServerErrorException();
        }
    }
}
